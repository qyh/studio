

  Listing 7.3




+ #include &lt;linux/input.h&gt;
+ #include &lt;linux/interrupt.h&gt;

+ /* Device structure */
+ struct {
+     /* ... */
+     struct input_dev dev;
+ } roller_mouse;

+ static int __init
+ roller_mouse_init(void)
+ {
+     /* Allocate input device structure */
+     roller_mouse-&gt;dev = input_allocate_device();
+
+     /* Can generate a click and a relative movement */
+     roller_mouse-&gt;dev-&gt;evbit[0] = BIT(EV_KEY) | BIT(EV_REL);
+     /* Can move only in the Y-axis */
+     roller_mouse-&gt;dev-&gt;relbit[0] = BIT(REL_Y);
+
+     /* My click should be construed as the left button
+        press of a mouse */
+     roller_mouse-&gt;dev-&gt;keybit[LONG(BTN_MOUSE)] = BIT(BTN_LEFT);
+     roller_mouse-&gt;dev-&gt;name = &quot;roll&quot;;
+
+     /* For entries in /sys/class/input/inputX/id/ */
+     roller_mouse-&gt;dev-&gt;id.bustype = ROLLER_BUS;
+     roller_mouse-&gt;dev-&gt;id.vendor = ROLLER_VENDOR;
+     roller_mouse-&gt;dev-&gt;id.product = ROLLER_PROD;
+     roller_mouse-&gt;dev-&gt;id.version = ROLLER_VER;
+     /* Register with the input subsystem */
+     input_register_device(roller_mouse-&gt;dev);
+ }

/* Global variables */
- spinlock_t roller_lock = SPIN_LOCK_UNLOCKED;
- static DECLARE_WAIT_QUEUE_HEAD(roller_poll);

/* The Roller Interrupt Handler */
static irqreturn_t
roller_interrupt(int irq, void *dev_id)
{
    int i, PA_t, PA_delta_t, movement = 0;
    /* Get the waveforms from bits 0, 1 and 2
       of Port D as shown in Figure 7.1 */
    PA_t = PORTD &amp; 0x07;
    /* Wait until the state of the pins change.
       (Add some timeout to the loop) */
    for (i=0; (PA_t==PA_delta_t); i++){
        PA_delta_t = PORTD &amp; 0x07;
    }
    movement = determine_movement(PA_t, PA_delta_t);
-   spin_lock(&amp;roller_lock);
-
-   /* Store the wheel movement in a buffer for
-      later access by the read()/poll() entry points */
-   store_movements(movement);
-
-   spin_unlock(&amp;roller_lock);
-
-   /* Wake up the poll entry point that might have
-      gone to sleep, waiting for a wheel movement */
-   wake_up_interruptible(&amp;roller_poll);
-
+   if (movement == CLOCKWISE) {
+       input_report_rel(roller_mouse-&gt;dev, REL_Y, 1);
+   } else if (movement == ANTICLOCKWISE) {
+       input_report_rel(roller_mouse-&gt;dev, REL_Y, -1);
+   } else if (movement == KEYPRESSED) {
+       input_report_key(roller_mouse-&gt;dev, BTN_LEFT, 1);
+   }
+   input_sync(roller_mouse-&gt;dev);
    return IRQ_HANDLED;
}



syntax highlighted by Code2HTML, v. 0.9.1


lines: 0
