

  Listing 7.2




#include &lt;linux/fs.h&gt;
#include &lt;asm/uaccess.h&gt;
#include &lt;linux/pci.h&gt;
#include &lt;linux/input.h&gt;
#include &lt;linux/platform_device.h&gt;

struct input_dev *vms_input_dev;        /* Representation of an input device */
static struct platform_device *vms_dev; /* Device structure */

/* Sysfs method to input simulated
   coordinates to the virtual
   mouse driver */
static ssize_t
write_vms(struct device *dev,
          struct device_attribute *attr,
          const char *buffer, size_t count)
{
    int x,y;

    sscanf(buffer, &quot;%d%d&quot;, &amp;x, &amp;y);
    /* Report relative coordinates via the
       event interface */
    input_report_rel(vms_input_dev, REL_X, x);
    input_report_rel(vms_input_dev, REL_Y, y);
    input_sync(vms_input_dev);
    return count;
}

/* Attach the sysfs write method */
DEVICE_ATTR(coordinates, 0644, NULL, write_vms);

/* Attribute Descriptor */
static struct attribute *vms_attrs[] = {
    &amp;dev_attr_coordinates.attr,
    NULL
};

/* Attribute group */
static struct attribute_group vms_attr_group = {
    .attrs = vms_attrs,
};

/* Driver Initialization */
int __init
vms_init(void)
{
    /* Register a platform device */
    vms_dev = platform_device_register_simple(&quot;vms&quot;, -1, NULL, 0);
    if (IS_ERR(vms_dev)){
        printk (&quot;vms_init: error\n&quot;);
        return PTR_ERR(vms_dev);
    }

    /* Create a sysfs node to read simulated coordinates */
    sysfs_create_group(&amp;vms_dev-&gt;dev.kobj, &amp;vms_attr_group);

    /* Allocate an input device data structure */
    vms_input_dev = input_allocate_device();
    if (!vms_input_dev) {
        printk(&quot;Bad input_allocate_device()\n&quot;); return -ENOMEM;
    }

    /* Announce that the virtual mouse will generate
       relative coordinates */
    set_bit(EV_REL, vms_input_dev-&gt;evbit);
    set_bit(REL_X, vms_input_dev-&gt;relbit);
    set_bit(REL_Y, vms_input_dev-&gt;relbit);

    /* Register with the input subsystem */
    input_register_device(vms_input_dev);

    printk(&quot;Virtual Mouse Driver Initialized.\n&quot;);
    return 0;
}

/* Driver Exit */
void
vms_cleanup(void)
{
    /* Unregister from the input subsystem */
    input_unregister_device(vms_input_dev);

    /* Cleanup sysfs node */
    sysfs_remove_group(&amp;vms_dev-&gt;dev.kobj, &amp;vms_attr_group);

    /* Unregister driver */
    platform_device_unregister(vms_dev);
    return;
}

module_init(vms_init);
module_exit(vms_cleanup);



syntax highlighted by Code2HTML, v. 0.9.1


lines: 0
