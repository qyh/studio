

  Listing 5.1



#include &lt;linux/fs.h&gt;
#include &lt;linux/cdev.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/slab.h&gt;
#include &lt;asm/uaccess.h&gt;
#include &lt;linux/pci.h&gt;

#define NUM_CMOS_BANKS 2

/* Per-device (per-bank) structure */
struct cmos_dev {
    unsigned short current_pointer; /* Current pointer within the
                                       bank */
    unsigned int size;              /* Size of the bank */
    int bank_number;                /* CMOS bank number */
    struct cdev cdev;               /* The cdev structure */
    char name[10];                  /* Name of I/O region */
    /* ... */                       /* Mutexes, spinlocks, wait
                                       queues, .. */
} *cmos_devp[NUM_CMOS_BANKS];

/* File operations structure. Defined in linux/fs.h */
static struct file_operations cmos_fops = {
    .owner = THIS_MODULE,           /* Owner */
    .open = cmos_open,              /* Open method */
    .release = cmos_release,        /* Release method */
    .read = cmos_read,              /* Read method */
    .write = cmos_write,            /* Write method */
    .llseek = cmos_llseek,          /* Seek method */
    .ioctl = cmos_ioctl,            /* Ioctl method */
};

static dev_t cmos_dev_number;       /* Allotted device number */
struct class *cmos_class;           /* Tie with the device model */

#define CMOS_BANK_SIZE              (0xFF*8)
#define DEVICE_NAME                 &quot;cmos&quot;
#define CMOS_BANK0_INDEX_PORT       0x70
#define CMOS_BANK0_DATA_PORT        0x71
#define CMOS_BANK1_INDEX_PORT       0x72
#define CMOS_BANK1_DATA_PORT        0x73

unsigned char addrports[NUM_CMOS_BANKS] = {CMOS_BANK0_INDEX_PORT,
                                           CMOS_BANK1_INDEX_PORT,};
unsigned char dataports[NUM_CMOS_BANKS] = {CMOS_BANK0_DATA_PORT,
                                           CMOS_BANK1_DATA_PORT,};
/*
 * Driver Initialization
 */
int __init
cmos_init(void)
{
    int i, ret;

    /* Request dynamic allocation of a device major number */
    if (alloc_chrdev_region(&amp;cmos_dev_number, 0,
                            NUM_CMOS_BANKS, DEVICE_NAME) &lt; 0) {
        printk(KERN_DEBUG &quot;Can't register device\n&quot;); return -1;
    }

    /* Populate sysfs entries */
    cmos_class = class_create(THIS_MODULE, DEVICE_NAME);

    for (i=0; i&lt;NUM_CMOS_BANKS; i++) {
        /* Allocate memory for the per-device structure */
        cmos_devp[i] = kmalloc(sizeof(struct cmos_dev), GFP_KERNEL);
        if (!cmos_devp[i]) {
            printk(&quot;Bad Kmalloc\n&quot;); return -ENOMEM;
        }

        /* Request I/O region */
        sprintf(cmos_devp[i]-&gt;name, &quot;cmos%d&quot;, i);
        if (!(request_region(addrports[i], 2, cmos_devp[i]-&gt;name))) {
            printk(&quot;cmos: I/O port 0x%x is not free.\n&quot;, addrports[i]);
            return -EIO;
        }         

        /* Fill in the bank number to correlate this device
           with the corresponding CMOS bank */
        cmos_devp[i]-&gt;bank_number = i;

        /* Connect the file operations with the cdev */
        cdev_init(&amp;cmos_devp[i]-&gt;cdev, &amp;cmos_fops);
        cmos_devp[i]-&gt;cdev.owner = THIS_MODULE;

        /* Connect the major/minor number to the cdev */
        ret = cdev_add(&amp;cmos_devp[i]-&gt;cdev, (cmos_dev_number + i), 1);
        if (ret) {
            printk(&quot;Bad cdev\n&quot;);
            return ret;
        }

        /* Send uevents to udev, so it'll create /dev nodes */
        device_create(cmos_class, NULL, MKDEV(MAJOR(cmos_dev_number), i),
                      &quot;cmos%d&quot;, i);
    }

    printk(&quot;CMOS Driver Initialized.\n&quot;);
    return 0;
}

/* Driver Exit */
void __exit
cmos_cleanup(void)
{
    int i;

    /* Release the major number */
    unregister_chrdev_region((cmos_dev_number), NUM_CMOS_BANKS);

    /* Release I/O region */
    for (i=0; i&lt;NUM_CMOS_BANKS; i++) {
        device_destroy (cmos_class, MKDEV(MAJOR(cmos_dev_number), i));
        release_region(addrports[i], 2);
        cdev_del(&amp;cmos_devp[i]-&gt;cdev);
        kfree(cmos_devp[i]);
    }

    /* Destroy cmos_class */
    class_destroy(cmos_class);

    return();
}

module_init(cmos_init);
module_exit(cmos_cleanup); 



syntax highlighted by Code2HTML, v. 0.9.1


lines: 0
