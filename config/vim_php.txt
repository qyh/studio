更换了注释插件NER_commenter,函数出错找不到解决办法，于是更换为插件EnhancedCommentify-----------------------------------------------------------------折腾了四天终于把 vim差不多搞定了 实现了目录，函数跳转，注释和php自动缩进，自动补全。有待日后完后vimrc代码如下：" 设置leader为,let mapleader=","let g:mapleader=","set nocompatible            " 关闭 vi 兼容模式syntax on                   " 自动语法高亮set mouse=a                 " 开启鼠标模式filetype plugin indent on   " 开启插件set number                  " 显示行号set nocursorline            " 不突出显示当前行set shiftwidth=4            " 设定 << 和 >> 命令移动时的宽度为 4set softtabstop=4           " 使得按退格键时可以一次删掉 4 个空格set tabstop=4               " 设定 tab 长度为 4set nobackup                " 覆盖文件时不备份set autochdir               " 自动切换当前目录为当前文件所在的目录set backupcopy=yes          " 设置备份时的行为为覆盖set ignorecase smartcase    " 搜索时忽略大小写，但在有一个或以上大写字母时仍大小写敏感set nowrapscan              " 禁止在搜索到文件两端时重新搜索set incsearch               " 输入搜索内容时就显示搜索结果set hlsearch                " 搜索时高亮显示被找到的文本set noerrorbells            " 关闭错误信息响铃set novisualbell            " 关闭使用可视响铃代替呼叫set t_vb=                   " 置空错误铃声的终端代码" set showmatch               " 插入括号时，短暂地跳转到匹配的对应括号" set matchtime=2             " 短暂跳转到匹配括号的时间" set nowrap                  " 不自动换行set magic                   " 显示括号配对情况set hidden                  " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存set smartindent             " 开启新行时使用智能自动缩进set cindent                 " c风格程序缩进set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,&gt;1s,=1s,:1sset backspace=indent,eol,start " 不设定在插入状态无法用退格键和 Delete 键删除回车符set cmdheight=1             " 设定命令行的行数为 1set laststatus=2            " 显示状态栏 (默认值为 1, 无法显示状态栏)set foldenable              " 开始折叠set foldmethod=syntax       " 设置语法折叠set foldcolumn=0            " 设置折叠区域的宽度setlocal foldlevel=1        " 设置折叠层数为" set foldclose=all           " 设置为自动关闭折叠" colorscheme colorzone       " 设定配色方案colorscheme default         " 设定配色方案 " 设置在状态行显示的信息set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ [%{(&fenc==""?&enc:&fenc).(&bomb?",BOM":"")}]\ %c:%l/%L%)\ " 显示Tab符:.,extends:>,precedes:<set listset listchars=tab:>- ,trail"设置代码折叠方式为 手工indentset foldmethod=indent"设置代码块折叠后显示的行数set foldexpr=1if has("gui_running")    set guioptions-=m " 隐藏菜单栏    set guioptions-=T " 隐藏工具栏    set guioptions-=L " 隐藏左侧滚动条    set guioptions-=r " 隐藏右侧滚动条    set guioptions-=b " 隐藏底部滚动条    set showtabline=0 " 隐藏Tab栏endif"启动后自动最大化 if has("win32")    au GUIEnter * simalt ~xendif" vim 支持中文set enc=utf-8set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936set langmenu=zh_CN.UTF-8language message zh_CN.UTF-8set guifont=NSimSun:h8set helplang=cnset ambiwidth=double "php缩进let PHP_autoformatcomment=1"-------------------------------------------------------"快捷键" 全文搜索选中的文字。选中后  ,f:vmap <silent> <leader>f y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>:vmap <silent> <leader>F y?<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>" 删除所有行未尾空格。快捷键f12nmap <F12> :%s/[ \t\r]\+$//g<CR>" Buffers操作快捷方式!切换文件 shirt+l.shift+hnmap <S-L> :bnext<CR>nmap <S-H> :bprevious<CR>"切换窗口。ctrl+w+whjklnmap <C-h> <C-w>hnmap <C-j> <C-w>jnmap <C-k> <C-w>knmap <C-l> <C-w>l"nmap <C-w> <C-w>w" 插入模式下左右移动光标"imap <c-l> <esc>la"imap <c-h> <esc>ha " 选中状态下复制  ctrl+cvmap <C-c> "+y "映射转换语法。快捷键：html:,1  php:,2  javascript,3  css,4 defalur ,5nmap <leader>1 :set filetype=xhtml<CR>nmap <leader>2 :set filetype=css<CR>nmap <leader>3 :set filetype=javascript<CR>nmap <leader>4 :set filetype=php<CR>nmap <leader>5 :set filetype=default<CR> " php语法进行检测 ctrl+p启动map <C-P> :!/php/php/bin/php -l %<CR> " php启动帮助 快捷键普通模式下Kautocmd BufNewFile,Bufread *.ros,*.inc,*.php set keywordprg="help"快速保存。 ,wq保存并退出说有  ,qq不保存退出所有 ,w保存所有 ctrl+w插入模式保存nmap <leader>wq :wqa<cr>nmap <leader>qq :qa!<cr>nmap <leader>w :w!<cr> "粘帖模式开启和关闭:set pastetoggle=<F4> "------------------------------------------------------- "不同文件类型的缩进au FileType html,python,vim,javascript setl shiftwidth=2au FileType html,python,vim,javascript setl tabstop=2au FileType java,php setl shiftwidth=4au FileType java,php setl tabstop=4set completeopt=longest,menu"----------------------------------------------------------------- " plugin - Mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。"   ,hl”光标下的单词或者文本高亮"   ,hh会清除该单词的高亮。如果在高亮单词外输入则清除所有的高亮"   ,hr来高亮符合输入一个正则表达式的文本nmap <silent> <leader>hl <Plug>MarkSetnmap <silent> <leader>hh <Plug>MarkClearnmap <silent> <leader>hr <Plug>MarkRegexvmap <silent> <leader>hl <Plug>MarkSetvmap <silent> <leader>hh <Plug>MarkClearvmap <silent> <leader>hr <Plug>MarkRegex" 你可以在高亮文本上使用“,#”或“,*”来上索高亮文本。在使用了“,#”或“,*" ”后，就可以直接输入“#”或“*”来继续查找该高亮文本，直到你又用“#”或“" *”查找了其它文本。 "----------------------------------------------------------------- " plugin - EnhCommentify.vim  注释代码用的，" <leader>c 这个注释之后光标会跳转到下一行。" <leader>x 用这个注释之后，光标仍然停留在当前行。nmap <silent> <F3> ,xvmap <silent> <F3> ,ximap <silent> <F3> ,x let g:EnhCommentifyUseSyntax = 'Yes'         "自动按照类型进行不同的注释let g:EnhCommentifyMultiPartBlocks = 'yes'   "注释多行时不要每行都加注释符let g:EnhCommentifyAlignRight = 'yes'        "注释自动对齐" let g:EnhCommentifyRespectIndent = 'Yes'    "注释靠近代码let g:EnhCommentifyPretty = 'Yes'             "注释和文字中间加空格"----------------------------------------------------------------- " plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录" :ERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree" NERDTree  <f10>开启和关闭map <F10> :NERDTreeToggle<CR>" o 打开关闭文件或者目录         t 在标签页中打开" T 在后台标签页中打开           ! 执行此文件" p 到上层目录                   P 到根目录" K 到第一个节点                 J 到最后一个节点" u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）" r 递归刷新当前目录             R 递归刷新当前根目录 "-----------------------------------------------------------------" plugin - NeoComplCache.vim    自动补全插件" 自动补全结合supertab插件使用tab补全或者ctrl+n" imap <C-t> <C-x><C-o>let g:neocomplcache_enable_at_startup = 1 " Use smartcase.let g:neocomplcache_enable_smart_case = 1 " Use camel case completion.let g:neocomplcache_enable_camel_case_completion = 1 " Use underbar completion.let g:neocomplcache_enable_underbar_completion = 1 " Set minimum syntax keyword length.let g:neocomplcache_min_syntax_length = 3let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'" Define dictionary.let g:NeoComplCache_DictionaryFileTypeLists = {'default' : '','php' :'/usr/share/vim/vim70/dict/php.dict'}" imap <silent><C-T> <Plug>(neocomplcache_snippets_expand)" smap <silent><C-T> <Plug>(neocomplcache_snippets_expand)" Define keyword.if !exists('g:neocomplcache_keyword_patterns')>->-let g:neocomplcache_keyword_patterns = {}endif>->-let g:neocomplcache_keyword_patterns['default'] = '\h\w*' "----------------------------------------------------------------- " plugin -supertab  智能tab插件" tab键自动补全let g:SuperTabDefaultCompletionType="<C-X><C-O>" "----------------------------------------------------------------- " plugin - bufexplorer.vim Buffers切换" <F8>打开文件列表窗口（上下方式）map <F8> <leader>bs" ,be 全屏方式查看全部打开的文件列表" ,bv 左右方式查看   ,bs 上下方式查看" 切换Buffers的操作快捷方式： shirt+l.shift+hlet g:bufExplorerDefaultHelp=0       " Do not show default help.let g:bufExplorerShowRelativePath=0  " 不显示相对路径（全路径）let g:bufExplorerSortBy='mru'        " Sort by most recently used.let g:bufExplorerSplitRight=0        " Split left.let g:bufExplorerSplitBelow=0        " Split new window above current "----------------------------------------------------------------- " plugin - Tlist相关设置" <F9>开启和关闭map <F9> :TlistToggle<cr>let Tlist_Auto_Highlight_Tag = 1let Tlist_Auto_Open = 0let Tlist_Auto_Update = 1let Tlist_Close_On_Select = 0let Tlist_Compact_Format = 0let Tlist_Display_Prototype = 0let Tlist_Display_Tag_Scope = 1let Tlist_Enable_Fold_Column = 0let Tlist_Exit_OnlyWindow = 1let Tlist_File_Fold_Auto_Close = 0let Tlist_GainFocus_On_ToggleOpen = 1let Tlist_Hightlight_Tag_On_BufEnter = 1let Tlist_Inc_Winwidth = 0let Tlist_Max_Submenu_Items = 1let Tlist_Max_Tag_Length = 30let Tlist_Process_File_Always = 0let Tlist_Show_Menu = 0let Tlist_Show_One_File = 0let Tlist_Sort_Type = "order"let Tlist_Use_Horiz_Window = 0let Tlist_Use_Right_Window = 1let Tlist_WinWidth = 20let tlist_php_settings = 'php;c:class;i:interfaces;d:constant;f:function' "-----------------------------------------------------------------"折叠设置set diffexpr=MyDiff()function! MyDiff()  let opt = '-a --binary '  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif  let arg1 = v:fname_in  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif  let arg2 = v:fname_new  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif  let arg3 = v:fname_out  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif  let eq = ''  if $VIMRUNTIME =~ ' '    if &sh =~ '\<cmd'      let cmd = '""' . $VIMRUNTIME . '\diff"'      let eq = '"'    else      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'    endif  else    let cmd = $VIMRUNTIME . '\diff'  endif  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eqendfunction  所安装的插件列表如下：omnicppcomplete-0.41.zip：实现自动补全 Tab键或者ctrl+lvim-php-manual.tar.gz ： php函数文档  K键supertab.vba： 实现tab键补全taglist_45.zip： 生成右侧的函数列表NERD_tree.zip ： vim界面左侧目录树mattn-zencoding-vim-88d8991.zip ：生成html//NERD_commenter.vim   注释代码用的，EnhancedCommentify 注释插件php的字典文件mark.vba.gz 标记javascript.zipcss.vimphp.vim（PHP-correct-Indenting 最新修订的php缩进vim）等  参考http://koch.ro/blog/index.php?/archives/63-VIM-an-a-PHP-IDE.html参考http://www.laruence.com/2010/08/18/1718.html参考http://yinqiongjie.blog.163.com/blog/static/5619762008102823227166/另参考http://www.blags.org/my-vim-php-development-profile/ 另有人的配置见连接：http://nootn.com/blog/Tool/22（附各种插件）