/*
 * peekpoke.c
 * Jon Masters <jcm@jonmasters.org>
 */

#include <linux/stddef.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define MMAP_FILE "/dev/mem"   /* physical direct. */
#define MMAP_SIZE 4096         /* 4K. */

/* #define DEBUG 1 */

int use_hex = 0;

void display_help(void);
int valid_flag(char *flag_str);
void peek(char *address_str);
void poke(char *address_str, char *value_str);
unsigned long *map_memory(unsigned long address);

void display_help() {

  printf("Usage information: \n"
	 "\n"
	 "    peekpoke [FLAG] ADDRESS [DATA]\n"
	 "\n"
	 "Valid Flags: \n"
	 "\n"
	 "    -x    Use Hexadecimal.\n");
  exit(0);
}

int valid_flag(char *flag_str) {

  if (strncmp(flag_str,"-x",2) == 0) {
    use_hex = 1;
#ifdef DEBUG
    printf("DEBUG: using hexadecimal.\n");
#endif
    return 1;
  }

#ifdef DEBUG
  printf("DEBUG: no valid flags found.\n");
#endif
  return 0;

}

void peek(char *address_str) {

  unsigned long address = 0;

  unsigned long offset = 0;
  unsigned long *mem = 0;

#ifdef DEBUG
  printf("DEBUG: peek(%s).\n",address_str);
#endif

  if (use_hex) {
    sscanf(address_str,"0x%lx",&address);
    /* printf("hexadecimal support is missing.\n"); */
  } else {
    address = atoi(address_str);
  }

#ifdef DEBUG
  printf("DEBUG: address is 0x%x.\n",address);
#endif
  
  offset = address - (address & ~4095);
  address = (address & ~4095);

#ifdef DEBUG
  printf("DEBUG: address is 0x%x.\n",address);
  printf("DEBUG: offset is 0x%x.\n",offset);
#endif
  
  mem = map_memory(address);
  
  printf("0x%lx\n",mem[offset]);
  
}

void poke(char *address_str, char *value_str) {

  unsigned long address = 0;
  unsigned long value = 0;

  unsigned long offset = 0;
  unsigned long *mem = 0;

#ifdef DEBUG
  printf("DEBUG: poke(%s,%s).\n",address_str,value_str);
#endif

  if (use_hex) {
    sscanf(address_str,"0x%lx",&address);
    sscanf(value_str,"0x%lx",&value);
    /* printf("hexadecimal support is missing.\n"); */
  } else {
    address = atoi(address_str);
    value = atoi(value_str);
  }

#ifdef DEBUG
  printf("DEBUG: address is 0x%x.\n",address);
  printf("DEBUG: value is 0x%x.\n",value);
#endif

  offset = address - (address & ~4095);
  address = (address & ~4095);

#ifdef DEBUG
  printf("DEBUG: address is 0x%x.\n",address);
  printf("DEBUG: offset is 0x%x.\n",offset);
#endif
  
  mem = map_memory(address);
  
  mem[offset] = value;

}

unsigned long *map_memory(unsigned long address) {

  int fd = 0;
  unsigned long *mem = 0;

#ifdef DEBUG
  printf("DEBUG: opening device.\n");
#endif

  if ((fd = open(MMAP_FILE,O_RDWR|O_SYNC)) < 0) {
    printf("Cannot open device file.\n");
    exit(1);
  }

  if (MAP_FAILED == (mem = mmap(NULL, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, address))) {
    printf("Cannot map device file.\n");
    exit(1);
  }

  return mem;
  
} /* map_memory */

int main(int argc, char **argv) {

  /* test we got a sensible invocation. */

  switch(argc) {

  case 0:
    printf("Impossibility Reached.\n");
    exit(1);
  case 1:
    display_help();
    break;
  case 2:
    peek(argv[1]);
    break;
  case 3:
    if (valid_flag(argv[1])) {
      peek(argv[2]);
    } else {
      poke(argv[1],argv[2]);
    }
    break;
  case 4:
    if (valid_flag(argv[1])) {
      poke(argv[2],argv[3]);
    } else {
      printf("Sorry that feature is not supported.\n");
      display_help();
    }
    break;
  default:
    printf("Sorry that option is not supported.\n");
    display_help();
    break;
  }

  exit(0);

} /* main */
