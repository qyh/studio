/*
 * procfs.c - Demonstrate making a file in procfs.
 *
 * Copyright (C) 2006 Jon Masters <jcm@jonmasters.org>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation.
 *
 */

#include <linux/init.h>
#include <linux/module.h>
#include <linux/proc_fs.h>

/* function prototypes */

static int procfs_read_proc(char *page, char **start, off_t off,
			    int count, int *eof, void *data);
/* global variables */

static struct proc_dir_entry *procfs_file;

/*
 * procfs_read_proc: populate a single page buffer with example data.
 * @page: A single 4K page (on most Linux systems) used as a buffer.
 * @start: beginning of the returned data
 * @off: current offset into proc file
 * @count: amount of data to read
 * @eof: eof marker
 * @data: data passed that was registered earlier
 */

static int procfs_read_proc(char *page, char **start, off_t off,
			    int count, int *eof, void *data)
{

	char payload[] = "hello, world!\n";
	int len = strlen(payload);

	if (count < len)
		return -EFAULT;
	
	strncpy(page,payload,len);
	
	return len;
}


/*
 * procfs_init: initialize the phony device
 * Description: This function allocates a new procfs entry.
 */


static int __init procfs_init(void)
{

	procfs_file = create_proc_read_entry("plp", 0, NULL,
					     procfs_read_proc, NULL);

	if (!procfs_file)
		return -ENOMEM;
	return 0;
}

/*
 * procfs_exit: uninitialize the phony device
 * Description: This function frees up the procfs entry.
 */


static void __exit procfs_exit(void)
{

	remove_proc_entry("plp", NULL);
}

/* declare init/exit functions here */

module_init(procfs_init);
module_exit(procfs_exit);

/* define module meta data */

MODULE_AUTHOR("Jon Masters <jcm@jonmasters.org>");
MODULE_DESCRIPTION("A simple driver populating a procfs file");
MODULE_LICENSE("GPL");
